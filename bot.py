import json
import os
from aiogram import Bot, Dispatcher, executor, types

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TOKEN = os.getenv("8018604636:AAEmP81mU4rYjhLel6_Q7jVYcpIfNUMcBHQ")
OWNER_ID = 7807571960  # –¢—ã ‚Äì –≤–ª–∞–¥–µ–ª–µ—Ü
DB_FILE = "users.json"

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã ===
if not os.path.exists(DB_FILE):
    with open(DB_FILE, "w") as f:
        json.dump({}, f)

def load_users():
    with open(DB_FILE, "r") as f:
        return json.load(f)

def save_users(users):
    with open(DB_FILE, "w") as f:
        json.dump(users, f, indent=4)

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
@dp.message_handler(commands=["start"])
async def start_cmd(msg: types.Message):
    user_id = str(msg.from_user.id)
    users = load_users()

    # –ú–µ–Ω—é
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üìã –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã")

    if user_id not in users:
        users[user_id] = {"step": "name"}
        save_users(users)
        await msg.answer("üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É.\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=keyboard)
    else:
        await msg.answer("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –û—Ç–ø—Ä–∞–≤—å /browse –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=keyboard)

# === –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç ===
@dp.message_handler(commands=["browse"])
@dp.message_handler(lambda msg: msg.text == "üìã –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã")
async def browse_profiles(msg: types.Message):
    user_id = str(msg.from_user.id)
    users = load_users()

    for uid, data in users.items():
        if uid != user_id and data.get("step") == "done":
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                types.InlineKeyboardButton("‚ù§Ô∏è –õ–∞–π–∫", callback_data=f"like:{uid}"),
                types.InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip:{uid}")
            )
            await msg.answer(
                f"üßë –ò–º—è: {data['name']}\nüìç –ì–æ—Ä–æ–¥: {data['city']}\nüéØ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {data['interests']}",
                reply_markup=keyboard
            )
            return
    await msg.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∞–Ω–∫–µ—Ç üò¢")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
@dp.callback_query_handler(lambda c: c.data.startswith("like") or c.data.startswith("skip"))
async def handle_buttons(callback: types.CallbackQuery):
    action, target_id = callback.data.split(":")
    if action == "like":
        await callback.message.answer("‚ù§Ô∏è –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    else:
        await callback.message.answer("‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ.")
    await callback.answer()

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∫–µ—Ç—ã ===
@dp.message_handler()
async def form_handler(msg: types.Message):
    user_id = str(msg.from_user.id)
    users = load_users()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if int(user_id) != OWNER_ID:
        await bot.send_message(OWNER_ID, f"üì• –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{msg.from_user.username or '–±–µ–∑ –Ω–∏–∫–∞'} ({user_id}):\n{msg.text}")

    if user_id in users:
        step = users[user_id].get("step")

        if step == "name":
            users[user_id]["name"] = msg.text
            users[user_id]["step"] = "city"
            await msg.answer("üèô –£–∫–∞–∂–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥:")
        elif step == "city":
            users[user_id]["city"] = msg.text
            users[user_id]["step"] = "interests"
            await msg.answer("üí¨ –ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:")
        elif step == "interests":
            users[user_id]["interests"] = msg.text
            users[user_id]["step"] = "done"
            save_users(users)
            await msg.answer("‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞! –ù–∞–∂–º–∏ 'üìã –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã' –∏–ª–∏ –≤–≤–µ–¥–∏ /browse")
    else:
        await msg.answer("–ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É.")
        
