import os
import json
import logging
import asyncio
import signal
from aiogram import Bot, Dispatcher, types
from aiogram import F
from aiogram.enums import ParseMode
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("8018604636:AAEmP81mU4rYjhLel6_Q7jVYcpIfNUMcBHQ")  # –¢–æ–∫–µ–Ω –∏–∑ Secrets GitHub
ADMIN_ID = int(os.getenv("7807571960", 0))  # ID –∞–¥–º–∏–Ω–∞ –∏–∑ Secrets

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DB_FILE = "users.json"

def init_db():
    if not os.path.exists(DB_FILE):
        with open(DB_FILE, "w") as f:
            json.dump({}, f)

def load_users():
    try:
        with open(DB_FILE, "r") as f:
            return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError):
        return {}

def save_users(users):
    with open(DB_FILE, "w") as f:
        json.dump(users, f, indent=2)

init_db()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É")],
        [KeyboardButton(text="üîç –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True
)

like_skip_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ù§Ô∏è –õ–∞–π–∫", callback_data="like"),
            InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip")
        ]
    ]
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(F.text == "/start")
async def start(message: types.Message):
    user_id = str(message.from_user.id)
    users = load_users()
    
    if user_id not in users:
        users[user_id] = {"step": "name"}
        save_users(users)
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
            reply_markup=main_kb
        )
    else:
        await message.answer(
            "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!",
            reply_markup=main_kb
        )

@dp.message(F.text == "/browse")
async def browse(message: types.Message):
    users = load_users()
    user_id = str(message.from_user.id)
    
    for uid, data in users.items():
        if uid != user_id and data.get("step") == "done":
            await message.answer(
                f"üë§ {data['name']}\n"
                f"üèô {data['city']}\n"
                f"üéØ {data['interests']}",
                reply_markup=like_skip_kb
            )
            return
    
    await message.answer("–ù–µ—Ç –∞–Ω–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")

@dp.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É")
async def create_profile(message: types.Message):
    user_id = str(message.from_user.id)
    users = load_users()
    users[user_id] = {"step": "name"}
    save_users(users)
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

@dp.callback_query(F.data == "like")
async def like(callback: types.CallbackQuery):
    await callback.answer("–õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω!")
    await browse(callback.message)

@dp.callback_query(F.data == "skip")
async def skip(callback: types.CallbackQuery):
    await callback.answer("–ü—Ä–æ–ø—É—â–µ–Ω–æ")
    await browse(callback.message)

@dp.message()
async def form(message: types.Message):
    user_id = str(message.from_user.id)
    users = load_users()
    
    if user_id not in users:
        return
    
    step = users[user_id].get("step")
    
    if step == "name":
        users[user_id]["name"] = message.text
        users[user_id]["step"] = "city"
        await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?")
    
    elif step == "city":
        users[user_id]["city"] = message.text
        users[user_id]["step"] = "interests"
        await message.answer("–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö")
    
    elif step == "interests":
        users[user_id]["interests"] = message.text
        users[user_id]["step"] = "done"
        await message.answer(
            "–ê–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞!",
            reply_markup=main_kb
        )
    
    save_users(users)

async def shutdown(signal, loop):
    """–ê–∫–∫—É—Ä–∞—Ç–Ω—ã–π shutdown –±–æ—Ç–∞"""
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    await bot.close()
    loop.stop()

async def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    loop = asyncio.get_running_loop()
    for s in (signal.SIGTERM, signal.SIGINT):
        loop.add_signal_handler(
            s,
            lambda s=s: asyncio.create_task(shutdown(s, loop))
        )
    
    try:
        # –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
        restart_task = asyncio.create_task(asyncio.sleep(7200))  # 2 —á–∞—Å–∞
        polling_task = asyncio.create_task(dp.start_polling(bot))
        
        await asyncio.wait(
            [restart_task, polling_task],
            return_when=asyncio.FIRST_COMPLETED
        )
        
        if restart_task.done():
            logger.info("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∏—Å—Ç–µ–∫–ª–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
            await bot.close()
            return  # GitHub Actions –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç –±–æ—Ç–∞
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        await bot.close()

if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    asyncio.run(main())
